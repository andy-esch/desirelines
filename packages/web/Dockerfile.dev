# Multi-stage build for React Development Environment

# Stage 1: Dependencies
FROM node:18-alpine AS dependencies
WORKDIR /app

# Copy package files only
COPY package*.json ./

# Install dependencies (including dev dependencies for development)
RUN npm ci --no-audit --no-fund

# Stage 2: Development Runtime
FROM node:18-alpine AS development
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S reactjs -u 1001

# Copy only node_modules from dependencies stage
COPY --from=dependencies --chown=reactjs:nodejs /app/node_modules ./node_modules

# Copy package files
COPY --chown=reactjs:nodejs package*.json ./

# Switch to non-root user
USER reactjs

# Set Node.js memory limits for low-memory systems
ENV NODE_OPTIONS="--max-old-space-size=512"

# Expose development server port
EXPOSE 3000

# Start development server with memory optimization
# Source code will be mounted as a volume in docker-compose
CMD ["npm", "start"]
