// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: user_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "desirelines.config.v1";

export enum AnnotationType {
  ANNOTATION_TYPE_UNSPECIFIED = 0,
  ANNOTATION_TYPE_EVENT = 1,
  ANNOTATION_TYPE_PERIOD = 2,
  ANNOTATION_TYPE_NOTE = 3,
  UNRECOGNIZED = -1,
}

/**
 * Top-level user configuration stored in Firestore
 * Document path: users/{userId}/config/v1
 */
export interface UserConfig {
  /** "1.0" */
  schemaVersion: string;
  userId: string;
  /** RFC3339 timestamp */
  lastUpdated: string;
  /** key = year (e.g., "2025") */
  goals: { [key: string]: GoalsForYear };
  annotations: { [key: string]: AnnotationsForYear };
  preferences?: Preferences | undefined;
  metadata?: Metadata | undefined;
}

export interface UserConfig_GoalsEntry {
  key: string;
  value?: GoalsForYear | undefined;
}

export interface UserConfig_AnnotationsEntry {
  key: string;
  value?: AnnotationsForYear | undefined;
}

/** Goals for a specific year */
export interface GoalsForYear {
  goals: Goal[];
}

export interface Goal {
  id: string;
  /** Distance in miles */
  value: number;
  label: string;
  /** RFC3339 timestamp */
  createdAt: string;
  /** RFC3339 timestamp */
  updatedAt: string;
}

/** Annotations for a specific year */
export interface AnnotationsForYear {
  annotations: Annotation[];
}

export interface Annotation {
  id: string;
  /** ISO date: "2025-07-14" */
  startDate: string;
  /** Optional, empty for single-day */
  endDate: string;
  label: string;
  description: string;
  /** Optional link */
  stravaActivityId: string;
  type: AnnotationType;
  /** RFC3339 timestamp */
  createdAt: string;
  /** RFC3339 timestamp */
  updatedAt: string;
}

/** User preferences (global, not year-specific) */
export interface Preferences {
  /** "light" or "dark" */
  theme: string;
  defaultYear: number;
  chartDefaults?: ChartDefaults | undefined;
}

export interface ChartDefaults {
  showAverage: boolean;
  showGoals: boolean;
}

/** Metadata about the config itself */
export interface Metadata {
  /** RFC3339 timestamp */
  createdAt: string;
  lastSyncedDevice: string;
  /** ["goals", "annotations", "preferences"] */
  configTypes: string[];
}

function createBaseUserConfig(): UserConfig {
  return {
    schemaVersion: "",
    userId: "",
    lastUpdated: "",
    goals: {},
    annotations: {},
    preferences: undefined,
    metadata: undefined,
  };
}

export const UserConfig: MessageFns<UserConfig> = {
  encode(message: UserConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.lastUpdated !== "") {
      writer.uint32(26).string(message.lastUpdated);
    }
    Object.entries(message.goals).forEach(([key, value]) => {
      UserConfig_GoalsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    Object.entries(message.annotations).forEach(([key, value]) => {
      UserConfig_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(90).fork()).join();
    });
    if (message.preferences !== undefined) {
      Preferences.encode(message.preferences, writer.uint32(98).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastUpdated = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = UserConfig_GoalsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.goals[entry10.key] = entry10.value;
          }
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          const entry11 = UserConfig_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry11.value !== undefined) {
            message.annotations[entry11.key] = entry11.value;
          }
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.preferences = Preferences.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUserConfig_GoalsEntry(): UserConfig_GoalsEntry {
  return { key: "", value: undefined };
}

export const UserConfig_GoalsEntry: MessageFns<UserConfig_GoalsEntry> = {
  encode(message: UserConfig_GoalsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      GoalsForYear.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserConfig_GoalsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserConfig_GoalsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = GoalsForYear.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUserConfig_AnnotationsEntry(): UserConfig_AnnotationsEntry {
  return { key: "", value: undefined };
}

export const UserConfig_AnnotationsEntry: MessageFns<UserConfig_AnnotationsEntry> = {
  encode(message: UserConfig_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      AnnotationsForYear.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserConfig_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserConfig_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = AnnotationsForYear.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGoalsForYear(): GoalsForYear {
  return { goals: [] };
}

export const GoalsForYear: MessageFns<GoalsForYear> = {
  encode(message: GoalsForYear, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.goals) {
      Goal.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoalsForYear {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoalsForYear();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.goals.push(Goal.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGoal(): Goal {
  return { id: "", value: 0, label: "", createdAt: "", updatedAt: "" };
}

export const Goal: MessageFns<Goal> = {
  encode(message: Goal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    if (message.label !== "") {
      writer.uint32(26).string(message.label);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Goal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAnnotationsForYear(): AnnotationsForYear {
  return { annotations: [] };
}

export const AnnotationsForYear: MessageFns<AnnotationsForYear> = {
  encode(message: AnnotationsForYear, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.annotations) {
      Annotation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnotationsForYear {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotationsForYear();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.annotations.push(Annotation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAnnotation(): Annotation {
  return {
    id: "",
    startDate: "",
    endDate: "",
    label: "",
    description: "",
    stravaActivityId: "",
    type: 0,
    createdAt: "",
    updatedAt: "",
  };
}

export const Annotation: MessageFns<Annotation> = {
  encode(message: Annotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.startDate !== "") {
      writer.uint32(18).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(26).string(message.endDate);
    }
    if (message.label !== "") {
      writer.uint32(34).string(message.label);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.stravaActivityId !== "") {
      writer.uint32(50).string(message.stravaActivityId);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    if (message.createdAt !== "") {
      writer.uint32(66).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(74).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Annotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.stravaActivityId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePreferences(): Preferences {
  return { theme: "", defaultYear: 0, chartDefaults: undefined };
}

export const Preferences: MessageFns<Preferences> = {
  encode(message: Preferences, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.theme !== "") {
      writer.uint32(10).string(message.theme);
    }
    if (message.defaultYear !== 0) {
      writer.uint32(16).int32(message.defaultYear);
    }
    if (message.chartDefaults !== undefined) {
      ChartDefaults.encode(message.chartDefaults, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Preferences {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreferences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.theme = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.defaultYear = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chartDefaults = ChartDefaults.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChartDefaults(): ChartDefaults {
  return { showAverage: false, showGoals: false };
}

export const ChartDefaults: MessageFns<ChartDefaults> = {
  encode(message: ChartDefaults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.showAverage !== false) {
      writer.uint32(8).bool(message.showAverage);
    }
    if (message.showGoals !== false) {
      writer.uint32(16).bool(message.showGoals);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChartDefaults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChartDefaults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.showAverage = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.showGoals = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMetadata(): Metadata {
  return { createdAt: "", lastSyncedDevice: "", configTypes: [] };
}

export const Metadata: MessageFns<Metadata> = {
  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createdAt !== "") {
      writer.uint32(10).string(message.createdAt);
    }
    if (message.lastSyncedDevice !== "") {
      writer.uint32(18).string(message.lastSyncedDevice);
    }
    for (const v of message.configTypes) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastSyncedDevice = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.configTypes.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
