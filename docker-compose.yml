services:
  # ==========================================
  # BACKEND PIPELINE SERVICES
  # Start with: make start (or docker compose up)
  # ==========================================

  activity-dispatcher:
    profiles: ["backend"]  # Backend pipeline only
    build:
      context: ./packages/dispatcher
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - GCP_PROJECT_ID=local-dev
      - GCP_PUBSUB_TOPIC=desirelines_activity_events
      - PORT=8080
    env_file:
      - .env
    volumes:
      - ./strava-auth-local.json:/etc/secrets/strava_auth.json:ro
    depends_on:
      pubsub-bootstrap:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--method=HEAD", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3

  activity-aggregator:
    profiles: ["backend"]  # Backend pipeline only
    build:
      context: .
      dockerfile: functions/Dockerfile.activity_aggregator
    ports:
      - "8082:8080"
    environment:
      - FUNCTION_TARGET=main
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
    env_file:
      - .env
    volumes:
      - ./.env:/app/.env
      - ./functions/activity_aggregator.py:/app/main.py
      - ./packages/aggregator/src/aggregator:/app/aggregator
      - ./strava-auth-local.json:/etc/secrets/strava_auth.json:ro
    depends_on:
      pubsub-bootstrap:
        condition: service_completed_successfully

  activity-bq-inserter:
    profiles: ["backend"]  # Backend pipeline only
    build:
      context: .
      dockerfile: functions/Dockerfile.activity_bq_inserter
    ports:
      - "8083:8080"
    environment:
      - FUNCTION_TARGET=main
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
    env_file:
      - .env
    volumes:
      - ./.env:/app/.env
      - ./functions/activity_bq_inserter.py:/app/main.py
      - ./packages/stravabqsync/src/stravabqsync:/app/stravabqsync
      - ./strava-auth-local.json:/etc/secrets/strava_auth.json:ro
    depends_on:
      pubsub-bootstrap:
        condition: service_completed_successfully

  # Bootstrap PubSub topics and subscriptions
  pubsub-bootstrap:
    profiles: ["backend"]  # Backend pipeline only
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    environment:
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - PROJECT_ID=local-dev
      - TOPIC_NAME=desirelines_activity_events
    volumes:
      - ./scripts/local-dev/bootstrap_pubsub.sh:/bootstrap_pubsub.sh:ro
    command: /bootstrap_pubsub.sh
    depends_on:
      - pubsub-emulator

  # Local PubSub emulator for testing
  pubsub-emulator:
    profiles: ["backend"]  # Backend pipeline only
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    ports:
      - "8085:8085"
    command: gcloud beta emulators pubsub start --host-port=0.0.0.0:8085
    environment:
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085

  # PubSub Emulator Web UI for debugging
  pubsub-ui:
    profiles: ["debug"]  # Debug profile (use with backend)
    image: ghcr.io/neoscript/pubsub-emulator-ui:latest
    ports:
      - "4200:80"
    environment:
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - GCP_PROJECT_ID=local-dev
    depends_on:
      - pubsub-emulator

  # ==========================================
  # FRONTEND SERVICES
  # Start with: make start-frontend
  # ==========================================

  # API Gateway - serves data to web UI (Go implementation)
  api-gateway:
    profiles: ["frontend"]  # Only starts with --profile frontend
    build:
      context: .
      dockerfile: functions/Dockerfile.apigateway
      # Note: This builds from packages/apigateway/cmd/local for Docker development
    ports:
      - "8084:8080"
    environment:
      - PORT=8080
      # Data source: local-fixtures (default) or cloud-storage
      - DATA_SOURCE=${DATA_SOURCE:-local-fixtures}
      - LOCAL_FIXTURES_PATH=/app/data/fixtures
      # Cloud storage configuration (used when DATA_SOURCE=cloud-storage)
      - GCP_PROJECT_ID=${GCP_PROJECT_ID_LIVE:-local-dev}
      - GCP_BUCKET_NAME=${GCP_BUCKET_NAME_LIVE:-desirelines_local_testing}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/.config/gcloud/application_default_credentials.json
    env_file:
      - .env
    volumes:
      # Mount local fixtures for development
      - ./data/fixtures:/app/data/fixtures:ro
      # Mount gcloud credentials for bucket access (used when DATA_SOURCE=cloud-storage)
      - ~/.config/gcloud:/app/.config/gcloud:ro
    # Resource limits for low-memory systems
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 32M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Web App (manual start only)
  # DISABLED: Use `make site-start` to run React directly (no Docker)
  web:
    profiles: ["frontend-docker"]  # Disabled by default, use different profile
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8084
      - CHOKIDAR_USEPOLLING=true  # Hot reload in Docker
      - NODE_OPTIONS=--max-old-space-size=512  # Limit Node.js memory to 512MB
    volumes:
      - ./web/src:/app/src
      - ./web/public:/app/public
      - ./web/package.json:/app/package.json:ro
      - ./web/tsconfig.json:/app/tsconfig.json:ro
      # Exclude node_modules from bind mount for performance
      - /app/node_modules
    # Resource limits for low-memory systems
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 256M
    depends_on:
      - api-gateway
