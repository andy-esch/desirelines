# Docker Compose override for local hybrid development with real GCP resources
# Uses Terraform-created local GCP resources (BigQuery, Storage) + PubSub emulator
# Usage: docker-compose -f docker-compose.yml -f docker-compose.local.yml up

services:
  activity-dispatcher:
    environment:
      # For hybrid mode: use emulator project ID since PubSub still uses emulator
      - GCP_PROJECT_ID=local-dev
      - GCP_PUBSUB_TOPIC=desirelines_activity_events
      - PORT=8080
      # Use user credentials (mounted from host)
      - GOOGLE_APPLICATION_CREDENTIALS=/app/.config/gcloud/application_default_credentials.json
    env_file:
      - .env
    volumes:
      # Mount your local gcloud config (Application Default Credentials)
      - ~/.config/gcloud:/app/.config/gcloud:ro

  activity-aggregator:
    environment:
      # Use real Terraform-created PubSub topics (no emulator)
      # Use user credentials (mounted from host)
      - GOOGLE_APPLICATION_CREDENTIALS=/app/.config/gcloud/application_default_credentials.json
      - GOOGLE_CLOUD_PROJECT=${GCP_PROJECT_ID_LIVE}
      # Override with live GCP project ID for AggregatorConfig
      - GCP_PROJECT_ID=${GCP_PROJECT_ID_LIVE}
      # Override with live GCP bucket name
      - GCP_BUCKET_NAME=${GCP_BUCKET_NAME_LIVE}
      # Strava credentials loaded from mounted volume at /etc/secrets/strava_auth.json
    volumes:
      - ./.env:/app/.env
      - ./functions/activity_aggregator.py:/app/main.py
      - ./packages/stravapipe/src/stravapipe:/app/stravapipe
      # Mount your local gcloud config (Application Default Credentials)
      - ~/.config/gcloud:/app/.config/gcloud:ro

  activity-bq-inserter:
    environment:
      # Use real Terraform-created PubSub topics (no emulator)
      # Use user credentials (mounted from host)
      - GOOGLE_APPLICATION_CREDENTIALS=/app/.config/gcloud/application_default_credentials.json
      - GOOGLE_CLOUD_PROJECT=${GCP_PROJECT_ID_LIVE}
      # Override with live GCP project ID and dataset for BQInserterConfig
      - GCP_PROJECT_ID=${GCP_PROJECT_ID_LIVE}
      - GCP_BIGQUERY_DATASET=desirelines
      # Strava credentials loaded from mounted volume at /etc/secrets/strava_auth.json
    volumes:
      - ./.env:/app/.env
      - ./functions/activity_bq_inserter.py:/app/main.py
      - ./packages/stravapipe/src/stravapipe:/app/stravapipe
      # Mount your local gcloud config (Application Default Credentials)
      - ~/.config/gcloud:/app/.config/gcloud:ro

  # API Gateway - Go implementation with live Cloud Storage (manual start only)
  api-gateway-live:
    profiles: ["frontend"] # Only starts with --profile frontend
    build:
      context: .
      dockerfile: functions/Dockerfile.apigateway
      # Note: This builds from packages/apigateway/cmd/local for Docker development
    ports:
      - "8084:8080"
    environment:
      - PORT=8080
      # Always use cloud storage for live mode
      - DATA_SOURCE=cloud-storage
      - GCP_PROJECT_ID=${GCP_PROJECT_ID_LIVE}
      - GCP_BUCKET_NAME=${GCP_BUCKET_NAME_LIVE}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/.config/gcloud/application_default_credentials.json
    env_file:
      - .env
    volumes:
      # Mount your local gcloud config (Application Default Credentials)
      - ~/.config/gcloud:/app/.config/gcloud:ro
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
