name: CI

on:
  pull_request:
  push:
    branches: [main]
    paths-ignore:
      - '**/README.md'
      - 'docs/**'

env:
  # Test environment variables
  GCP_PROJECT_ID: "test-project"
  GCP_BIGQUERY_DATASET: "test_dataset"
  GCP_BUCKET_NAME: "test-bucket"
  GCP_PUBSUB_TOPIC: "test-topic"
  STRAVA_CLIENT_ID: "123"
  STRAVA_CLIENT_SECRET: "test_secret"
  STRAVA_REFRESH_TOKEN: "test_token"
  STRAVA_WEBHOOK_VERIFY_TOKEN: "test_verify_token"
  STRAVA_WEBHOOK_SUBSCRIPTION_ID: "12345"

jobs:
  python-quality:
    name: Python Tests & Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: uv sync --all-packages

      - name: Run Python tests with coverage
        run: make py-test-coverage

      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: python
          name: python-coverage
          fail_ci_if_error: false

      - name: Run Python linting
        run: make py-lint

      - name: Run Python type checking
        run: make py-typecheck

  go-quality:
    name: Go Tests & Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install Go dependencies (dispatcher)
        run: cd packages/dispatcher && go mod download

      - name: Install Go dependencies (apigateway)
        run: cd packages/apigateway && go mod download

      - name: Tidy Go modules (dispatcher)
        run: cd packages/dispatcher && go mod tidy

      - name: Tidy Go modules (apigateway)
        run: cd packages/apigateway && go mod tidy

      - name: Run Go tests with coverage
        run: make go-test-coverage

      - name: Upload Go coverage to Codecov (dispatcher)
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/dispatcher/coverage.out
          flags: go-dispatcher
          name: go-dispatcher-coverage
          fail_ci_if_error: false

      - name: Upload Go coverage to Codecov (apigateway)
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/apigateway/coverage.out
          flags: go-apigateway
          name: go-apigateway-coverage
          fail_ci_if_error: false

      - name: Run Go linting - dispatcher
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: packages/dispatcher
          args: --timeout=5m

      - name: Run Go linting - apigateway
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: packages/apigateway
          args: --timeout=5m

      - name: Check Go formatting
        run: |
          make go-format
          # Check that .go files are properly formatted
          git diff --exit-code '*.go'

  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.12"

      - name: Validate Terraform - Local Environment
        run: |
          cd terraform/environments/local
          terraform fmt -check
          terraform init -backend=false
          terraform validate

      - name: Validate Terraform - Dev Environment
        run: |
          cd terraform/environments/dev
          terraform fmt -check
          terraform init -backend=false
          terraform validate

      - name: Validate Terraform - Prod Environment
        run: |
          cd terraform/environments/prod
          terraform fmt -check
          terraform init -backend=false
          terraform validate

      - name: Validate Terraform - Module
        run: |
          cd terraform/modules/desirelines
          terraform fmt -check
          terraform init -backend=false
          terraform validate

  web-quality:
    name: Web/React Tests & Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./packages/web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: packages/web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Copy fixture data
        run: npm run copy-fixtures

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload Web coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/web/coverage/lcov.info
          flags: web
          name: web-coverage
          fail_ci_if_error: false

      - name: Build application
        run: npm run build
